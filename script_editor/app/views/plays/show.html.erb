
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN" "http://www.w3.org/TR/REC-html40/loose.dtd">
<html><body style = "background-color: #faebd7">
    <p id="notice"></p>


    <!--
        The synopsis will show up here as a popup
    -->
    <div id="synopsis-modal" class="shown-modal">
        <div class="modal-content">
            <span class="close">&times;</span>
            <div class="hidden-synopsis" id="hidden-synopsis"></div>
        </div>
    </div>


    <!--
        The analytics will show up here as a popup
    -->
    <div id="analytics-modal" class="shown-modal">
        <div class="modal-content">
            <span class="close2">&times;</span>
            <div class="hidden-analytics" id="hidden-analytics"></div>

            <br>

            <!-- Create a button for each act and scene in the play -->
            <% lastact = 0 %>
            <% actScenes = Scene.joins(:act).select(" acts.number as act_number, scenes.number as scene_number, scenes.id as scene_id, acts.id as act_id").where(acts: {:play_id => @play.id}) %>
            <% actScenes.each do |actScene| %>
              <% if lastact != actScene.act_number %>
                <% lastact = actScene.act_number %>
                <% actWords = Word.joins(:line => :scene).where(scenes: {:act_id => actScene.act_id}).count %>
                <div class="analytics-actRow">
                    <div class="analytics-column analytics-left">
                        <%= "ACT " + actScene.act_number.to_s %>
                    </div>
                    <div class="analytics-column analytics-middle">
                        <%= "Original Word Count: " + actWords.to_s %>
                    </div>
                    <br>
                </div>
              <% end %>
              <% sceneWords = Word.joins(:line).where(lines: {:scene_id => actScene.scene_id}).count %>
              <div class="analytics-sceneRow">
                <div class="analytics-column analytics-left">
                        <%= "SCENE " + actScene.scene_number.to_s %>
                    </div>
                    <div class="analytics-column analytics-middle">
                        <%= "Original Word Count: " + sceneWords.to_s %>
                    </div>
                    <br>
              </div>

            <% end %>

            <% analyticstext = "" %>
            <script>
                document.getElementById('hidden-analytics').innerHTML = '<%= escape_javascript analyticstext %>';
            </script>
        </div>
    </div>

    <!--
        Parse the XML file for number of acts & scenes in order to
        create the navigation bar
    -->
    <div class="script-side-bar">
        <div class="play-navigation">

            <!-- This button shows the play's synopsis -->
            <button class="nav-synopsis" id="synopsis-button">SYNOPSIS</button>

            <!-- This button shows the play's analytics -->
            <button class="nav-analytics" id="analytics-button">ANALYTICS</button>

            <!-- Create a button for each act and scene in the play -->
            <% lastact = 0 %>
            <% actScenes = Scene.joins(:act).select(" acts.number as act_number, scenes.number as scene_number, scenes.id as scene_id, acts.id as act_id").where(acts: {:play_id => @play.id}) %>
            <% actScenes.each do |actScene| %>
              <% if lastact != actScene.act_number %>
                <% lastact = actScene.act_number %>
                <button class="nav-act" id="current-act"><%= "ACT " + actScene.act_number.to_s %></button>
                <script>
                    document.getElementById('current-act').id = '<%= escape_javascript "na" + actScene.scene_number.to_s %>';
                </script>
              <% end %>
              <button class="nav-scene" id="current-scene"><%= "SCENE " + actScene.scene_number.to_s %></button>
              <script>
                  document.getElementById('current-scene').id = '<%= escape_javascript "ns" + actScene.scene_number.to_s %>';
              </script>

            <% end %>


        </div>
    </div>

    <div class="script-editor">
        <div class="edit-explanation">
            HEY YOU!<br>
            MAKE AN EDIT IF YOU WANT TO MAKE CHANGES!<br>
            MAKE SURE YOU'RE LOGGED IN FIRST
        </div>
        <% if current_user %>
          <% link = "/makenewedit/" + @play.id.to_s %>
        <% else %>
          <% link = "/users/sign_in" %>
        <% end %>
        <a href=<%=link%>>
          <button class="save-button"> EDIT</button>
        </a/>
    </div>

    <div class="script-main">
        <% @acts.each do |act| %>
            <div class="actDiv" id="Diva"><button class="acthead" id="current-act" data-display="true"> Act <%= act.number %> </button><br></b>
             <% rscenes = Scene.joins(:act).where(:act_id => act.id).order(:number) %>
             <% rscenes.each do |scene| %>
               <div class="sceneDiv" id="Divs"><button class="scenehead" id="current-scene" data-display="true"> Scene <%= scene.number %> </button><br>
                <br>
                <!--credit to kombajn zbozowy for "not in" implementation https://stackoverflow.com/questions/25519513/rails-activerecord-query-where-relationship-does-not-exist-based-on-third-attrib-->
                <% wordLines = Line.joins(:scene).joins(:words).where(:scene_id => scene.id).select("words.id as wordid, lines.number as lineNum, *").order(:number) %>
                <% last_number = 0 %>
                <% currentSpeaker = "" %>
                <% wordLines.each do |wordline| %>
                <% if wordline.isStage %>
                  <br/>
                  <button class="stage" data-cut="false" data-display="true" id = <%= wordline.wordid.to_s %>>
                      <%= wordline.text %>
                  </button>
                  <br>
                <% else %>
                    <% if wordline.lineNum != last_number %>
                      <% last_number = wordline.lineNum %>
                      <% if (currentSpeaker != wordline.speaker) %>
                        <% currentSpeaker = wordline.speaker %>
                        <br><br> <p class="speaker"> <%= wordline.speaker %> </p>
                      <% end %>
                      <br>
                      <p class="lineNum"><%= wordline.lineNum %></p>
                    <% end %>
                    <button class ="word" data-cut="false" data-display="true" id = <%= wordline.wordid.to_s %>>
                    <%= wordline.text %>
                    </button>
                  <% end %>
                <% end %>

            <% end %>
            </div>
        <% end %>
        </div>
    </div>

<script>
    //Create events for the various functions associated with strikethrough.

    document.querySelector(".save-button").addEventListener("click", saveCut, false);
    var mousedrag = false;
    var currId = 0;
    var cutlist = [];
    var uncutlist = [];
    var checkId = "";

    $(window).on("beforeunload", function() {
        if(cutlist.length != 0 || uncutlist != 0)
        {
            return "Are you sure you want to leave? You have unsaved work which will be lost.";
        }
    });

    //Credit to Odin Thunder https://stackoverflow.com/questions/45349885/how-to-resend-a-failed-ajax-request-globally
    //If a server call fails, try again.
    $( document ).ajaxError( function( event, jqxhr, settings, thrownError) {
        $.ajax(settings);
    });

    //Save that the mouse is down.
    function drag()
    {
        mousedrag = true;
    }

    //Save that the mouse is up.
    function lift()
    {
        mousedrag = false;
        currId = 0;
    }

    //A filter which removes the word given.
    function remove(word)
    {
        return word != checkId;
    }

    //Manage the data necessary to cut or uncut a word.
    function dataCut(clickedItem,cut)
    {
        var idNum = parseInt(clickedItem.id);
        checkId = idNum;
        if(cut)
        {
            cutlist = cutlist.filter(remove);
            cutlist.push(idNum);
        }
        else
        {
            uncutlist = uncutlist.filter(remove);
            uncutlist.push(idNum);
        }
    }

    //If the save button is hit, send cached data to the database.
    function saveCut()
    {
        var script = $(".script-main")[0];
        var cEditId = parseInt(script.id);
        if(cutlist.length != 0)
        {
            idNum = cutlist.pop();
            var cutmessage = "Cut: " + idNum.toString();
            console.log(cutmessage);
            $.post("/cuts/new",
            {
                editI: cEditId,
                wordI: idNum
            },function()
            {
                saveCut();
            });
            return;
        }
        if(uncutlist.length != 0)
        {
            idNum = uncutlist.pop();
            var cutmessage = "Uncut: " + idNum.toString();
            console.log(cutmessage);
            $.post("/cuts/delete",
            {
                editI: cEditId,
                wordI: idNum
            },function()
            {
                saveCut();
            });
            return;
        }
    }

    //Changes visuals of a word.
    function modifyStyle(clickedItem,color,style,cut)
    {
        clickedItem.style.color = color;
        clickedItem.style.textDecoration = style;
        clickedItem.dataset.cut = cut;
    }

    //Actually executes the XML cut on a word based on whether it was cut before or not.
    function literalCut(clickedItem,cut)
    {
        var color;
        var style;
        if(cut)
        {
            style = "line-through";
            if(clickedItem.getAttribute("class") == "cword" || clickedItem.getAttribute("class") == "cstage")
            {
                color = "#D3D3D3";
            }
            else
            {
                color = "#888888";
            }
        }
        else
        {
            style = "none";
            if(clickedItem.getAttribute("class") == "cword" || clickedItem.getAttribute("class") == "cstage")
            {
                color = "#006BFF";
            }
            else
            {
                color = "#000000";
            }
        }
        modifyStyle(clickedItem,color,style,cut);
    }

    // all words will need to be printed within the div class "script-main"
    function doCut(e) {
        var clickedItem = e.target;
        // Strikesthrough lines if mouse is down, and unstrikes if shift is also held.
        if (clickedItem.getAttribute("class") == "word" || clickedItem.getAttribute("class") == "punc" || clickedItem.getAttribute("class") == "cword" || clickedItem.getAttribute("class") == "stage" || clickedItem.getAttribute("class") == "cstage")
        {
            if (clickedItem.tagName.toLowerCase() == "button") {
                if (mousedrag && !e.shiftKey) {
                    literalCut(clickedItem,true);
                    dataCut(clickedItem,true);
                }
                else if(e.shiftKey && mousedrag) {
                    literalCut(clickedItem,false);
                    dataCut(clickedItem,false);
                }
            }
        }
    }
</script>



    <script>
        /**
         * This controls scene buttons in the navigation bar
         */
        var sceneButtons = document.getElementsByClassName("nav-scene");
        var sceneLength = sceneButtons.length;
        for (var i = 0; i < sceneLength; i++) {
            sceneButton = sceneButtons[i];
            sceneButton.addEventListener("click", showScene, false);
        }
        function showScene(scene) {
            var allScenes = document.getElementsByClassName("scenehead");
            for (var i = 0; i < allScenes.length; i++) {
                if (("n" + allScenes[i].id) == scene.target.id) {
                    allScenes[i].style.backgroundColor = "yellow";
                    window.location.hash = allScenes[i].id;
                }
                else {
                    allScenes[i].style.backgroundColor = "transparent";
                }
            }
            var allActs = document.getElementsByClassName("acthead");
            for (var i = 0; i < allActs.length; i++) {
                allActs[i].style.backgroundColor = "transparent";
            }
        }
        /**
         * This controls act buttons in the navigation bar
         */
        var actButtons = document.getElementsByClassName("nav-act");
        var actLength = actButtons.length;
        for (var i = 0; i < actLength; i++) {
            actButton = actButtons[i];
            actButton.addEventListener("click", showAct, false);
        }
        function showAct(act) {
            var allActs = document.getElementsByClassName("acthead");
            for (var i = 0; i < allActs.length; i++) {
                if (("n" + allActs[i].id) == act.target.id) {
                    allActs[i].style.backgroundColor = "yellow";
                    window.location.hash = allActs[i].id;
                }
                else {
                    allActs[i].style.backgroundColor = "transparent";
                }
            }
            var allScenes = document.getElementsByClassName("scenehead");
            for (var i = 0; i < allScenes.length; i++) {
                allScenes[i].style.backgroundColor = "transparent";
            }
        }
        /**
         * This controls the synopsis button in the navigation bar.
         */
        var modal = document.getElementById("synopsis-modal");
        var btn = document.getElementById("synopsis-button");
        var span = document.getElementsByClassName("close")[0];
        btn.onclick = function() {
            modal.style.display = "block";
        }
        span.onclick = function() {
            modal.style.display = "none";
        }
        /**
         * This controls the analytics button in the navigation bar.
         */
        var modal2 = document.getElementById("analytics-modal");
        var btn2 = document.getElementById("analytics-button");
        var span2 = document.getElementsByClassName("close2")[0];
        btn2.onclick = function() {
            modal2.style.display = "block";
        }
        span2.onclick = function() {
            modal2.style.display = "none";
        }
        /**
         * This closes the modals if the user clicks outside of either
         * the synopsis or analytics modal.
         */
        window.onclick = function(event) {
            if (event.target == modal2) {
                modal2.style.display = "none";
            }
            if (event.target == modal) {
                modal.style.display = "none";
            }
        }
    </script>

    </div>

</body></html>
